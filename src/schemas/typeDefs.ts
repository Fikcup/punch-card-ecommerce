import { gql } from "graphql-tag";

export const typeDefs = gql`
    type Query {
        "Queries token to find respective user"
        me(token: String!): Me!
        "Returns the entire product catalog for the store"
        getCatalog: [Product!]!
        "Store metrics for total purchases made, discounts issued, and discounts used"
        getStoreOverview: StoreOverview!
        "Returns all coupons the customer has access to based on their authorization token. Please use example token provided in the README"
        getOwnCoupons: [Coupon!]!
        "Checks that a token is valid and belongs to a user"
        validateToken(token: String!): User
    }

    type Mutation {
        "Allows a customer to sign up"
        customerSignUp(input: CustomerSignUpInput!): Me!
        "Allows a customer or an admin to log in"
        logIn(input: LogInInput!): Me
        "Allows a customer to purchase their items"
        checkout(input: CheckoutInput!): Order!
        "Allows an admin to update product information in the product catalog"
        adminUpdateProduct(input: UpdateProductInput!): Product!
        "Allows an admin to create a new product"
        adminCreateProduct(input: CreateProductInput!): Product!
        "Allows an admin to soft delete a product from their product catalog"
        adminDeleteProduct(productId: ID!): Product!
        "Allows an admin to create a new active coupon and will effect only future customer coupons"
        adminChangeActiveCoupon(input: AdminChangeActiveCouponInput!): Coupon!
    }

    "A user can be an admin or a customer"
    enum UserType {
        ADMIN
        CUSTOMER
    }
    
    "An invoice can be paid or refunded"
    enum InvoiceStatus {
        PAID
        REFUNDED
    }

    "Store overview is a list of important store metrics"
    type StoreOverview {
        totalPurchases: Int!
        totalDiscountsIssued: Int!
        totalDiscountsRedeemed: Int!
    }

    "A user is an admin or a customer"
    union User = Admin | Customer

    "Me is a response type for authentication requests that includes user information and a valid token"
    type Me {
        user: User!
        "JWT token"
        token: String!
    }

    "An admin is a user that manages the store information"
    type Admin {
        id: ID!
        userType: UserType!
        username: String!
        email: String!
        firstName: String!
        lastName: String!
        store: StoreOverview!
    }

    "A customer is a user type that purchases items from the store"
    type Customer {
        id: ID!
        userType: UserType!
        username: String!
        email: String!
        firstName: String!
        lastName: String!
        coupons: [Coupon!]! 
    }

    "A product is a good that the store is selling"
    type Product {
        id: ID!
        name: String!
        description: String!
        price: Float!
        stockQuantity: Int!
    }

    "A coupon is a percentage or dollar amount discount that can be used to generate a customer specific coupon"
    type Coupon {
        id: ID!
        couponCode: String!
        purchasesRequired: Int!
        dollarAmount: Int
        discountPercentage: Int
        maxDollarValue: Int
        active: Boolean!
    }

    "A customer coupon is a coupon that has been applied to an order"
    type CustomerCoupon {
        id: ID!
        customerId: ID!
        coupon: Coupon!
        used: Boolean!
    }

    "An order is a complete purchase a customer has made"
    type Order {
        id: ID!
        userId: ID!
        orderDate: String!
        items: [OrderItem!]
        invoice: Invoice
    }

    "An order item is an individual item sold on an order"
    type OrderItem {
        id: ID!
        orderId: ID!
        product: Product!
        quantity: Int!
        subTotal: Float!
    }

    "An order coupon is a coupon that has been applied to an order"
    type OrderCoupon {
        id: ID!
        orderId: ID!
        coupon: CustomerCoupon!
    }

    "An invoice is the payment information for an order"
    type Invoice {
        id: ID!
        orderId: ID!
        paymentDate: String!
        "Payment token is an external field generated by Braintree/payment processor. In this case, as a payment processor has not been implemented, this is a randomly generated string"
        paymentToken: String!
        subTotal: Float!
        status: InvoiceStatus!
    }

    "A checkout item is the item information needed for the checkout flow"
    input CheckoutItem {
        id: ID!
        quantity: Int!
    }

    input CustomerSignUpInput {
        username: String!
        password: String!
        email: String!
        firstName: String!
        lastName: String!
    }

    input LogInInput {
        username: String!
        password: String!
    }

    input CheckoutInput {
        items: [CheckoutItem!]!
        couponCodes: [String!]!
    }

    input CreateProductInput {
        name: String!
        description: String!
        price: Float!
        stockQuantity: Int!
    }

    input UpdateProductInput {
        id: ID!
        name: String
        description: String
        price: Float
        stockQuantity: Int
    }

    input AdminChangeActiveCouponInput {
        couponCode: String!
        purchasesRequired: Int!
        dollarAmount: Int
        discountPercentage: Int
        maxDollarValue: Int
    }
`;